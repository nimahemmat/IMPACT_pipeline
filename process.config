process {
    
    // default number of cpus to uses
    cpus = { 2 * task.attempt }
    memory = { 3.GB * task.attempt }
    time = { 23.hour * task.attempt }

    // default errorStrategy 2 attempts then finish
    errorStrategy = { task.exitStatus in [140,143,137,104,134,139,247] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'
    
    // set default cache policy
    // Cache keys are created indexing input files path and size attributes
    // 'lenient'policy provides a workaround for incorrect caching invalidation
    // observed on shared file systems due to inconsistent files timestamps.
    cache = 'lenient'

    withLabel:low_memory{
        memory = { 6.GB * task.attempt}
    }

    withLabel:med_memory{
         memory = { 15.GB * task.attempt }
    }

    withLabel:medhigh_memory{
        memory = { 100.GB * task.attempt }
    }

    withLabel:high_memory{
        memory = { 150.GB * task.attempt }
    }

    withName: 'cut_adaptors' {
        cpus = {10 * task.attempt }
        maxForks = 4
    }

    withName: 'MakeUbam' {
        cpus = {16 * task.attempt}
        maxForks = 1
    }

    withName: 'MergeBams' {
        cpus = {10 * task.attempt}
        maxForks = 2
    }

    withName: 'BwaAlign' {
        cpus = {16 * task.attempt}
        maxForks = 1
    }

    withName: 'MarkDuplicates' {
        cpus = {10 * task.attempt}
        maxForks = 2
    }

    withName: 'SamtoolsSortDups' {
        cpus = {8 * task.attempt}
        maxForks = 4
    }

    withName: 'SetNmMdAndUqTags' {
        cpus = {10 * task.attempt}
        maxForks = 2
    }

    withName: 'scatterBaseRecalibrator' {
        cpus = {4 * task.attempt}
        maxForks = 10
    }

    withName: 'scatterapplyBQSRS' {
        cpus = {6 * task.attempt}
        maxForks = 10
    }

    withName: 'gatherRecalBamFiles' {
        cpus = {8 * task.attempt}
        maxForks = 1
    }

    withName: 'Mutect2' {
        cpus = {4 * task.attempt}
        maxForks = 10
    }

    withName: 'GatherMutect2Calls' {
        cpus = {4 * task.attempt}
        maxForks = 2
    }

    withName: 'GetPileup' {
        cpus = {4 * task.attempt}
        maxForks = 5
    }

    withName: 'FilterMutect2Calls' {
        cpus = {4 * task.attempt}
        maxForks = 5
    }

    withName: 'Manta' {
        cpus = {6 * task.attempt}
        maxForks = 1
    }

    withName: 'Strelka2' {
        cpus = {6 * task.attempt}
        maxForks = 5
    }

    withName: 'Strelka2CombineVCFs' {
        cpus = {4 * task.attempt}
        maxForks = 5
    }

    withName: 'SamToolsMPileup' {
        cpus = {8 * task.attempt}
        maxForks = 10
    }

    withName: 'AlignmentMetrics' {
        cpus = {6 * task.attempt}
        maxForks = 8
    }

    withName: 'Varscan2' {
        cpus = {4 * task.attempt}
        maxForks = 10
    }

    withName: 'GatherVarscan2scatters' {
        cpus = {4 * task.attempt}
        maxForks = 5
    }

    withName: 'ProcessSomaticVarscan2Calls' {
        cpus = {4 * task.attempt}
        maxForks = 5
    }

    withName: 'FilterVarscan2Calls' {
        cpus = {4 * task.attempt}
        maxForks = 5
    }

    withName: 'scatterVardict' {
        cpus = {6 * task.attempt}
        maxForks = 10
    }

    withName: 'GatherVardictCalls' {
        cpus = {4 * task.attempt}
        maxForks = 5
    }

    withName: 'FinalizeVardictCalls' {
        cpus = {4 * task.attempt}
        maxForks = 5
    }

    withName: 'runMSISensorPro' {
        cpus = {8 * task.attempt}
        maxForks = 5
    }

    withName: 'cnv_facets' {
        cpus = {6 * task.attempt}
        maxForks = 5
    }

    withName: 'AlleleCount' {
        cpus = {6 * task.attempt}
        maxForks = 10
    }

    withName: 'GatherAlleleCounts' {
        cpus = {8 * task.attempt}
        maxForks = 2
    }

    withName: 'FindCountsInsideInterval' {
        maxForks = 5
    }

    withName: 'ConvertAlleleCountToLogBaf' {
        cpus = {8 * task.attempt}
        maxForks = 2
    }

    withName: 'ASCAT' {
        cpus = {6 * task.attempt}
        maxForks = 5
    }

    withName: 'RunCNVkit' {
        cpus = {16 * task.attempt}
        maxForks = 1
    }

    withName: 'Polysolver' {
        cpus = {10 * task.attempt}
        maxForks = 2
    }

    withName: 'RunLOHHLA' {
        cpus = {16 * task.attempt}
        maxForks = 1
    }

    withName: 'TcellExTRECT' {
        cpus = {6 * task.attempt}
    }

    withLabel: 'picard' {
        container = 'https://depot.galaxyproject.org/singularity/picard:3.0.0--hdfd78af_1'
    }

    withLabel: 'gatk' {
        container = 'https://depot.galaxyproject.org/singularity/gatk4:4.2.0.0--hdfd78af_1'
    }

    withLabel: 'manta' {
        container = 'https://depot.galaxyproject.org/singularity/manta:1.6.0--h9ee0642_2'
    }

    withLabel: 'strelka' {
        container = 'https://depot.galaxyproject.org/singularity/strelka:2.9.10--h9ee0642_1'
    }

    withLabel: 'varscan' {
        container = 'https://depot.galaxyproject.org/singularity/varscan:2.4.4--hdfd78af_1'
    }

    withLabel: 'bam_readcount' {
        container = 'https://depot.galaxyproject.org/singularity/bam-readcount:1.0.1--h43eeafb_2'
    }

    withLabel: 'vardict' {
        container = 'https://depot.galaxyproject.org/singularity/vardict-java:1.6.0--0'
    }

    withLabel: 'msiSensorPro' {
        container = 'https://depot.galaxyproject.org/singularity/msisensor-pro:1.3.0--hfef96ef_0'
    }

    withLabel: 'facets' {
        container = 'https://depot.galaxyproject.org/singularity/cnv_facets:0.16.1--py312r43h8537716_1'
    }

    withLabel: 'AlleleCounter' {
        container = 'https://depot.galaxyproject.org/singularity/cancerit-allelecount:4.3.0--heecbde5_4'
    }

    withLabel: 'Dplyr' {
        container = 'https://depot.galaxyproject.org/singularity/r-dplyr:0.5.0--r3.3.2_1'
    }

    withLabel: 'ascat' {
        container = 'https://depot.galaxyproject.org/singularity/ascat:3.2.0--r44hdfd78af_1'
    }

    withLabel: 'VariantAnnotation' {
        container = 'https://depot.galaxyproject.org/singularity/bioconductor-variantannotation:1.48.1--r43ha9d7317_0'
    }

    withLabel: 'CNVkit' {
        container = 'https://depot.galaxyproject.org/singularity/cnvkit:0.9.9--pyhdfd78af_0'
    }

    withLabel: 'Polysolver' {
        container = "docker://vacation/hla-polysolver"
    }

    withLabel: 'LOHHLA' {
        container = '/config/binaries/singularity/containers_devel/nextflow/lohhla_hg38-1.0.0.img'
    }

    withLabel: 'TcellExTRECT' {
        container = "docker://briansha/tcellextrect:latest"
    }

}
